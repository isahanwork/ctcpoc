{
	"name": "nb_ongoing_sales_fct_d41338c3-3b21-4e1d-b452-431236f21026",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "coursepool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a7abd076-23c9-4979-a209-83a50e64ebf0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
				"name": "coursepool",
				"type": "Spark",
				"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Init input parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"esp_date = \"20170720\"\r\n",
					"path_base = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters_overwritten"
					]
				},
				"source": [
					"# This cell is generated from runtime parameters. Learn more: https://go.microsoft.com/fwlink/?linkid=2161015\n",
					"esp_date = 20170723\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"USE adv_edw;\r\n",
					"SET spark.sql.sources.partitionOverwriteMode=dynamic;\r\n",
					"\r\n",
					"%%pyspark\r\n",
					"\r\n",
					"spark.conf.set(\"esp_date\", esp_date)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Read Source tables"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Read Products RAW table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#spark.read.parquet(f\"{path_base}/raw/products/batch_dt={esp_date}*/*.parquet\").createOrReplaceTempView('ref_raw_products')\r\n",
					"df = spark.read.parquet(f\"{path_base}/raw/products/\").createOrReplaceTempView('ref_raw_products')"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Read Sales RAW table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#try:\r\n",
					"#    spark.read.parquet(f\"{path_base}/raw/sales/batch_dt={esp_date}*/*.parquet\").createOrReplaceTempView('ref_raw_sales')\r\n",
					"#except:\r\n",
					"#    mssparkutils.notebook.exit(f\"cannot load batch_dt={esp_date} file\")  \r\n",
					"\r\n",
					"df = spark.read.parquet(f\"{path_base}/raw/sales/\").createOrReplaceTempView('ref_raw_sales')"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Perform Transformations"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"create or replace temporary view ref_stg_sales  AS\r\n",
					"select \r\n",
					"       s.pos_transaction_id\r\n",
					"     , p.sku_num\r\n",
					"     , s.item_price as item_price_amt\r\n",
					"     , s.item_qty \r\n",
					"     , s.batch_dt as raw_batch_dt\r\n",
					"     , CURRENT_TIMESTAMP as load_ts \r\n",
					"     , to_date(s.transaction_dt,\"yyyyMMdd\") as transaction_date\r\n",
					"  from ref_raw_sales s\r\n",
					"  left outer join ref_raw_products p on s.product_id = p.product_id and s.batch_dt = p.batch_dt and p.batch_dt = '${esp_date}'\r\n",
					"  where s.batch_dt = '${esp_date}' "
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write to Target table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"insert overwrite table adv_edw.sales_fct partition(transaction_date)\r\n",
					"select pos_transaction_id\r\n",
					"     , sku_num\r\n",
					"     , item_price_amt\r\n",
					"     , item_qty \r\n",
					"     , raw_batch_dt\r\n",
					"     , load_ts \r\n",
					"     , transaction_date\r\n",
					"  from ref_stg_sales\r\n",
					"  ;\r\n",
					""
				],
				"execution_count": 26
			}
		]
	}
}