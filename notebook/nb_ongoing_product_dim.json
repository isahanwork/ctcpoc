{
	"name": "nb_ongoing_product_dim",
	"properties": {
		"folder": {
			"name": "adv/pySpark/product_dim"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "coursepool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c73686fd-94a5-406d-a76d-e82d4b3744a4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
				"name": "coursepool",
				"type": "Spark",
				"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 5
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"esp_date = \"20170716\"\r\n",
					"base_path = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"print(esp_date)\r\n",
					"\r\n",
					"spark.conf.set(\"esp_date\", esp_date)  \r\n",
					"\r\n",
					"sys = mssparkutils.notebook\r\n",
					"\r\n",
					"raw_folder_path = f'{base_path}/raw'\r\n",
					"\r\n",
					"try:\r\n",
					"    raw_df = spark.read.parquet(f\"{raw_folder_path}/products/batch_dt={esp_date}/*.parquet\")\r\n",
					"except:\r\n",
					"    sys.exit(f\"cannot load batch_dt={esp_date} file\")  \r\n",
					"\r\n",
					"raw_df.createOrReplaceTempView('ref_product_raw')\r\n",
					"\r\n",
					"sql = f\"\"\"\r\n",
					"select \r\n",
					"      sku_num, product_nm, category_nm, sub_category_nm\r\n",
					"    , item_price_amt, standard_cost_amt, color_nm, model_nm\r\n",
					"    , CURRENT_TIMESTAMP as load_ts \r\n",
					"    , batch_dt as raw_batch_dt \r\n",
					"  from (\r\n",
					"        select *\r\n",
					"            , row_number()  OVER (PARTITION BY sku_num ORDER BY batch_dt desc) AS last_value\r\n",
					"        from ref_product_raw\r\n",
					"       -- where batch_dt={esp_date}\r\n",
					"      )\r\n",
					"where last_value = 1\r\n",
					"\"\"\"\r\n",
					"raw_df = spark.sql(sql)\r\n",
					"raw_df.createOrReplaceTempView('ref_product_raw')\r\n",
					"#raw_df.show(50)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"%%sql\r\n",
					"-- Merge statement to handle upsert of RAW dataset into TRG table\r\n",
					"MERGE INTO adv_edw.product_dim t\r\n",
					"USING (\r\n",
					"    SELECT sku_num AS MergeKey, \r\n",
					"           raw.sku_num, raw.product_nm, raw.category_nm, raw.sub_category_nm\r\n",
					"         , raw.item_price_amt, raw.standard_cost_amt, raw.color_nm\r\n",
					"         , raw.load_ts, raw.raw_batch_dt\r\n",
					"    FROM ref_product_raw raw\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"    SELECT null AS MergeKey, \r\n",
					"           raw.sku_num, raw.product_nm, raw.category_nm, raw.sub_category_nm\r\n",
					"         , raw.item_price_amt, raw.standard_cost_amt, raw.color_nm\r\n",
					"         , raw.load_ts, raw.raw_batch_dt\r\n",
					"    FROM ref_product_raw AS raw\r\n",
					"    JOIN  adv_edw.product_dim AS trg ON trg.sku_num = raw.sku_num\r\n",
					"    WHERE trg.current_record_ind = 1 \r\n",
					"      AND ( trg.product_nm <> raw.product_nm\r\n",
					"         or trg.item_price_amt <> raw.item_price_amt\r\n",
					"          )\r\n",
					") s\r\n",
					"ON t.sku_num = s.MergeKey\r\n",
					"WHEN MATCHED AND t.current_record_ind = 1 \r\n",
					" AND ( t.product_nm <> s.product_nm\r\n",
					"    or t.category_nm <> s.category_nm\r\n",
					"    or t.sub_category_nm <> s.sub_category_nm\r\n",
					"    or t.item_price_amt <> s.item_price_amt\r\n",
					"    or t.standard_cost_amt <> s.standard_cost_amt\r\n",
					"    or t.color_nm <> s.color_nm\r\n",
					"    )\r\n",
					" THEN\r\n",
					"  UPDATE SET t.current_record_ind = 0, t.end_date = (to_date('${esp_date}',\"yyyyMMdd\"))\r\n",
					"WHEN NOT MATCHED THEN\r\n",
					"  INSERT (sku_num, effective_date, end_date, product_nm, category_nm, sub_category_nm, \r\n",
					"          item_price_amt, standard_cost_amt, color_nm, load_ts, raw_batch_dt, current_record_ind) \r\n",
					"  VALUES (s.sku_num, to_date('${esp_date}',\"yyyyMMdd\"), '9999-12-31', s.product_nm, s.category_nm, s.sub_category_nm, \r\n",
					"          s.item_price_amt, s.standard_cost_amt, s.color_nm, s.load_ts, s.raw_batch_dt, 1)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"(spark.read\r\n",
					" .format(\"delta\").load(f\"{base_path}/edw/product_dim/\") #delta table folder to read from\r\n",
					" .repartition(1) #number of files to write\r\n",
					" .write.option(\"dataChange\", \"false\") #do not change the data\r\n",
					" .format(\"delta\").mode(\"overwrite\").save(f\"{base_path}/edw/product_dim/\")) #location to write new file(s)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"--Vacuum files where table version is older than 7 days \r\n",
					"VACUUM adv_edw.product_dim RETAIN 168 HOURS;\r\n",
					"\r\n",
					"-- Retrieve the version/change history of the Delta table\r\n",
					"--DESCRIBE HISTORY avd_edw.products_dim;"
				],
				"execution_count": 17
			}
		]
	}
}