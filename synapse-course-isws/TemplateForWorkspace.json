{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-isws"
		},
		"ctc-poc-prod-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ctc-poc-prod-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:ctc-poc-prod.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_adv_raw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_adv_raw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-isws-ondemand.sql.azuresynapse.net,1433;Initial Catalog=adv_raw"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_serverless_sql_pool_db_nyc_taxi_ldw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-isws-ondemand.sql.azuresynapse.net,1433;Initial Catalog=nyc_taxi_ldw"
		},
		"synapse-course-isws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-isws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-isws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ctc-poc-prod-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://issynapsecoursedl.dfs.core.windows.net"
		},
		"ls_synapsecoursedl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://issynapsecoursedl.dfs.core.windows.net/"
		},
		"synapse-course-isws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://issynapsecoursedl.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nselect distinct year, month\n  from silver.vw_trip_data_green;\n\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and Month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete Partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Create Gold View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "NonQuery",
									"text": "DROP VIEW IF EXISTS gold.vw_trip_data_green;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        borough         VARCHAR(15),\n        trip_date       DATE,\n        trip_day        VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT,\n        street_hail_trip_count INT,\n        dispatch_trip_count    INT,\n        trip_distance          FLOAT,\n        trip_duration          INT,\n        fare_amount            FLOAT\n  ) AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "course/taxi"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-03T19:44:05Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_trip_data_green_agg')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create Gold Trip Data Green Agg",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "1_spark_create_gold_trip_data_green_agg",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "coursepool",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "course/taxi"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-03T19:44:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/1_spark_create_gold_trip_data_green_agg')]",
				"[concat(variables('workspaceId'), '/bigDataPools/coursepool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach Folder Path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_usp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Silver Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Silver Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folder_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							}
						]
					}
				},
				"folder": {
					"name": "course/taxi"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-03T19:43:53Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone"
								},
								{
									"type": "NonQuery",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "course/demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T14:54:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "course/demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T14:54:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nselect distinct year, month\n  from bronze.vw_trip_data_green_csv;\n\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and Month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete Partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Create Silver View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "NonQuery",
									"text": "DROP VIEW IF EXISTS silver.vw_trip_data_green;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        vendor_id INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "course/taxi"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-03T19:43:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_execute_all_pipelines')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Create Silvel Tables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Create Silver Trip Data Green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Gold Trip Data Green",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Create Silvel Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Create Silver Trip Data Green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Gold Trip Data Green Agg",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Create Silver Trip Data Green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_trip_data_green_agg",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "course/taxi"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-03T19:44:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tables')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_trip_data_green_agg')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_init_load_product_dim')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Recreate Product Dim",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nb_recreate_product_dim",
								"type": "NotebookReference"
							},
							"parameters": {
								"batch_start_date": {
									"value": {
										"value": "@{pipeline().parameters.start_date}",
										"type": "Expression"
									},
									"type": "int"
								},
								"batch_end_date": {
									"value": {
										"value": "@{pipeline().parameters.end_date}",
										"type": "Expression"
									},
									"type": "int"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "coursepool",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"numExecutors": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"start_date": {
						"type": "string",
						"defaultValue": "20170711"
					},
					"end_date": {
						"type": "string",
						"defaultValue": "20170715"
					}
				},
				"folder": {
					"name": "adv/edw/product_dim"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-06T12:53:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/nb_recreate_product_dim')]",
				"[concat(variables('workspaceId'), '/bigDataPools/coursepool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_init_load_sales_fct')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "nb_backfill_sales_fct",
						"description": "Added some short description to check how it looks like in PR",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nb_backfill_sales_fct",
								"type": "NotebookReference"
							},
							"parameters": {
								"batch_start_date": {
									"value": {
										"value": "@pipeline().parameters.start_date",
										"type": "Expression"
									},
									"type": "int"
								},
								"batch_end_date": {
									"value": {
										"value": "@pipeline().parameters.end_date",
										"type": "Expression"
									},
									"type": "int"
								}
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"start_date": {
						"type": "int",
						"defaultValue": 20170711
					},
					"end_date": {
						"type": "int",
						"defaultValue": 20170715
					}
				},
				"folder": {
					"name": "adv/edw/sales_fct"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/nb_backfill_sales_fct')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_load_products_batches')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Dates",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_adv_raw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "select top(@{pipeline().parameters.days}) date_id as esp_dt\n  from bronze.vw_calendar\n where date_id >=  @{pipeline().parameters.dt_satart}\n order by date_id   ",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEachDates",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Dates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Dates').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Products Batch Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adv",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "raw/products/batch_dt=@{item().esp_dt}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Load Produtcs Partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Products Batch Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_load_products_raw]",
										"storedProcedureParameters": {
											"esp_dt": {
												"value": {
													"value": "@{item().esp_dt}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_adv_raw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dt_satart": {
						"type": "string",
						"defaultValue": "20170711"
					},
					"days": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "adv/raw"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-06T12:25:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adv_raw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adv')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_load_sales_batches')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Dates",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_adv_raw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "select date_id as esp_dt\n  from bronze.vw_calendar\n where date_id between  @{pipeline().parameters.dt_satart}\n   and  @{pipeline().parameters.dt_end}",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEachDates",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Dates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Dates').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Batch Partition Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adv",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "raw/sales/batch_dt=@{item().esp_dt}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Load Sales Partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Batch Partition Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_load_sales_raw]",
										"storedProcedureParameters": {
											"esp_dt": {
												"value": {
													"value": "@{item().esp_dt}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_adv_raw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dt_satart": {
						"type": "string",
						"defaultValue": "20170710"
					},
					"dt_end": {
						"type": "string",
						"defaultValue": "20200615"
					}
				},
				"folder": {
					"name": "adv/raw"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-06T12:25:05Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adv_raw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adv')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_ongoing_product_dim')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Run Daily Batch Product Dim",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nb_ongoing_product_dim",
								"type": "NotebookReference"
							},
							"parameters": {
								"esp_date": {
									"value": {
										"value": "@{pipeline().parameters.esp_date}",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "coursepool",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"numExecutors": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"esp_date": {
						"type": "string",
						"defaultValue": "99999999"
					}
				},
				"folder": {
					"name": "adv/edw/product_dim"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-06T12:34:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/nb_ongoing_product_dim')]",
				"[concat(variables('workspaceId'), '/bigDataPools/coursepool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_ongoing_sales_fct')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Dates",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_adv_raw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "select top(@{pipeline().parameters.days}) date_id as esp_dt\n  from bronze.vw_calendar\n where date_id >=  @{pipeline().parameters.esp_date}\n order by date_id   ",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEachDates",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Dates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Dates').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "nb_ongoing_sales_fct",
									"type": "SynapseNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebook": {
											"referenceName": "nb_ongoing_sales_fct",
											"type": "NotebookReference"
										},
										"parameters": {
											"esp_date": {
												"value": {
													"value": "@{item().esp_dt}",
													"type": "Expression"
												},
												"type": "int"
											}
										},
										"snapshot": true,
										"conf": {
											"spark.dynamicAllocation.enabled": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"esp_date": {
						"type": "int",
						"defaultValue": 20170711
					},
					"days": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "adv/edw/sales_fct"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adv_raw')]",
				"[concat(variables('workspaceId'), '/notebooks/nb_ongoing_sales_fct')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_recreate_calendar')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Batch Partition Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adv",
								"type": "DatasetReference",
								"parameters": {
									"p_folder_path": {
										"value": "raw/calendar",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Calendar table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Batch Partition Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_adv_raw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\n"
								},
								{
									"type": "Query",
									"text": "CREATE EXTERNAL TABLE silver.calendar\nWITH (LOCATION = 'calendar/', DATA_SOURCE = [adw_raw], FILE_FORMAT = [ParquetFormat])\nAS\n  select cast(date_id as int) as day_id\n\t   , cast(month_id as int) as month_id\n\t   , cast(substring(month_id,1,4) as int)  year_id\n       , fiscal_month as fiscal_month_nm\n       , fiscal_quarter as fiscal_quarter_nm\n       , fiscal_year as fiscal_year_nm\n    from bronze.vw_calendar\n\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "adv/raw"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-06T15:48:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adv')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adv_raw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adv"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "adventure-works"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "course"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "course/demo"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ctc-poc-prod-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ctc-poc-prod-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ctc-poc-prod-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ctc-poc-prod-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_adv_raw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_adv_raw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsecoursedl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapsecoursedl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-isws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-isws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-isws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-isws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_nyc_taxi_data_load')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_execute_all_pipelines",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2023-10-26T18:35:00",
						"endTime": "2023-10-26T18:45:00",
						"timeZone": "FLE Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_execute_all_pipelines')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.rate_code') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code\nGO\n\nCREATE EXTERNAL TABLE silver.rate_code\n    WITH\n    (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/rate_code',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT rate_code_id, rate_code\n  FROM OPENROWSET(\n      BULK 'raw/rate_code.json',\n      DATA_SOURCE = 'nyc_taxi_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b',\n      ROWTERMINATOR = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS rate_code\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      rate_code_id TINYINT,\n      rate_code VARCHAR(20) \n  );\n\n\n SELECT * FROM silver.rate_code; ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type\nGO\n\nCREATE EXTERNAL TABLE silver.payment_type\n    WITH\n    (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/payment_type',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT payment_type, description\n  FROM OPENROWSET(\n      BULK 'raw/payment_type.json',\n      DATA_SOURCE = 'nyc_taxi_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      payment_type SMALLINT,\n      description VARCHAR(20) '$.payment_type_desc'\n  );\n\n\n SELECT * FROM silver.payment_type; ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n/*\nIF OBJECT_ID('silver.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_data_green\nGO\n\nCREATE EXTERNAL TABLE silver.trip_data_green\n    WITH\n    (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/trip_data_green',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.trip_data_green_csv;\n\n\nSELECT * FROM silver.trip_data_green; \n\n*/\n\nEXEC silver.usp_silver_trip_data_green '2020', '01'\nEXEC silver.usp_silver_trip_data_green '2020', '02'\nEXEC silver.usp_silver_trip_data_green '2020', '03'\nEXEC silver.usp_silver_trip_data_green '2020', '04'\nEXEC silver.usp_silver_trip_data_green '2020', '05'\nEXEC silver.usp_silver_trip_data_green '2020', '06'\nEXEC silver.usp_silver_trip_data_green '2020', '07'\nEXEC silver.usp_silver_trip_data_green '2020', '08'\nEXEC silver.usp_silver_trip_data_green '2020', '09'\nEXEC silver.usp_silver_trip_data_green '2020', '10'\nEXEC silver.usp_silver_trip_data_green '2020', '11'\nEXEC silver.usp_silver_trip_data_green '2020', '12'\nEXEC silver.usp_silver_trip_data_green '2021', '01'\nEXEC silver.usp_silver_trip_data_green '2021', '02'\nEXEC silver.usp_silver_trip_data_green '2021', '03'\nEXEC silver.usp_silver_trip_data_green '2021', '04'\nEXEC silver.usp_silver_trip_data_green '2021', '05'\nEXEC silver.usp_silver_trip_data_green '2021', '06'\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO \n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS silver.vw_trip_data_green\nGO\n\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        vendor_id INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result]\nGO\n\nSELECT TOP(100) *\n  FROM silver.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n/*\nCampaigns Requirement\nLet's start with the SELECT statement required to satisfy the requirement (1)\n*/\n\n/*\nSELECT td.year,\n       td.month,\n       tz.borough,\n       CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n       cal.day_name AS trip_day,\n       CASE WHEN cal.day_name IN ('Saturday','Sunday') THEN 'Y' ELSE 'N' END AS trip_day_weekend_ind,\n       SUM(CASE WHEN pt.description = 'Credit card' THEN 1 ELSE 0 END) AS card_trip_count,\n       SUM(CASE WHEN pt.description = 'Cash' THEN 1 ELSE 0 END) AS cash_trip_count\n  FROM silver.vw_trip_data_green td\n  JOIN silver.taxi_zone tz ON (td.pu_location_id = tz.location_id)\n  JOIN silver.calendar cal ON (cal.date = CONVERT(DATE, td.lpep_pickup_datetime))\n  JOIN silver.payment_type pt ON (td.payment_type = pt.payment_type)\nWHERE td.year = '2020'\n  AND td.month = '01'\nGROUP BY td.year,\n       td.month,\n       tz.borough,\n       CONVERT(DATE, td.lpep_pickup_datetime),\n       cal.day_name\n*/\n\n/*\nDemand Forecast Requirement\nLet's start with the SELECT statement required to satisfy the requirement (2)\n*/\n\n/*\nSELECT td.year,\n       td.month,\n       tz.borough,\n       CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n       cal.day_name AS trip_day,\n       CASE WHEN cal.day_name IN ('Saturday','Sunday') THEN 'Y' ELSE 'N' END AS trip_day_weekend_ind,\n       SUM(CASE WHEN pt.description = 'Credit card' THEN 1 ELSE 0 END) AS card_trip_count,\n       SUM(CASE WHEN pt.description = 'Cash' THEN 1 ELSE 0 END) AS cash_trip_count,\n       SUM(CASE WHEN tt.trip_type_desc = 'Street-hail' THEN 1 ELSE 0 END) AS street_hail_trip_count,\n       SUM(CASE WHEN tt.trip_type_desc = 'Dispatch' THEN 1 ELSE 0 END) AS dispatch_trip_count ,\n       SUM(td.trip_distance) AS trip_distance,\n       SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime, td.lpep_dropoff_datetime)) AS trip_duration,\n       SUM(td.fare_amount) AS fare_amount\n  FROM silver.vw_trip_data_green td\n  JOIN silver.taxi_zone tz ON (td.pu_location_id = tz.location_id)\n  JOIN silver.calendar cal ON (cal.date = CONVERT(DATE, td.lpep_pickup_datetime))\n  JOIN silver.payment_type pt ON (td.payment_type = pt.payment_type)\n  JOIN silver.trip_type tt ON (td.trip_type = tt.trip_type)\nWHERE td.year = '2020'\n  AND td.month = '01'\nGROUP BY td.year,\n       td.month,\n       tz.borough,\n       CONVERT(DATE, td.lpep_pickup_datetime),\n       cal.day_name;\n*/\n\nEXEC gold.usp_gold_trip_data_green '2020', '01';\nEXEC gold.usp_gold_trip_data_green '2020', '02';\nEXEC gold.usp_gold_trip_data_green '2020', '03';\nEXEC gold.usp_gold_trip_data_green '2020', '04';\nEXEC gold.usp_gold_trip_data_green '2020', '05';\nEXEC gold.usp_gold_trip_data_green '2020', '06';\nEXEC gold.usp_gold_trip_data_green '2020', '07';\nEXEC gold.usp_gold_trip_data_green '2020', '08';\nEXEC gold.usp_gold_trip_data_green '2020', '09';\nEXEC gold.usp_gold_trip_data_green '2020', '10';\nEXEC gold.usp_gold_trip_data_green '2020', '11';\nEXEC gold.usp_gold_trip_data_green '2020', '12';\nEXEC gold.usp_gold_trip_data_green '2021', '01';\nEXEC gold.usp_gold_trip_data_green '2021', '02';\nEXEC gold.usp_gold_trip_data_green '2021', '03';\nEXEC gold.usp_gold_trip_data_green '2021', '04';\nEXEC gold.usp_gold_trip_data_green '2021', '05';\nEXEC gold.usp_gold_trip_data_green '2021', '06';\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO \n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        borough         VARCHAR(15),\n        trip_date       DATE,\n        trip_day        VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT,\n        street_hail_trip_count INT,\n        dispatch_trip_count    INT,\n        trip_distance          FLOAT,\n        trip_duration          INT,\n        fare_amount            FLOAT\n  ) AS [result]\nGO\n\nSELECT *\n  FROM gold.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE master\nGO\n\nCREATE DATABASE nyc_taxi_ldw\nGO\n\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/descovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://issynapsecoursedl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n-- Changed to use the abfss protocol\n-- HEADER_ROW set to TRUE, Row and Field terminators set\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://issynapsecoursedl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n-- Examine the data types for the columns\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://issynapsecoursedl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) AS [result]'\n\nSELECT\n    MAX(LEN(LocationId)) AS len_LocationId,\n    MAX(LEN(Borough)) AS len_Borough,\n    MAX(LEN(Zone)) AS len_Zone,\n    MAX(LEN(service_zone)) AS len_service_zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n-- Use WITH clause to provide explicit data types\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://issynapsecoursedl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )AS [result]\n\nEXEC sp_describe_first_result_set N'SELECT\n    *\nFROM\n    OPENROWSET(\n        BULK ''https://issynapsecoursedl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '','',\n        ROWTERMINATOR = ''\\n''\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )AS [result]'\n\nSELECT name, collation_name FROM sys.databases;\n\n-- Specify UTF-8 Collation for VARCHAR columns\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n    )AS [result]\n\nCREATE DATABASE nyc_taxi_discovery;\n\nUSE nyc_taxi_discovery;\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )AS [result]\n\n\n-- Select only subset of columns \nSELECT top 10\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        Borough VARCHAR(15),\n        Zone VARCHAR(50)\n    )AS [result]         \n\n-- Read data from a file without header\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        Zone VARCHAR(50) 3,\n        Borough VARCHAR(15) 2\n    )\nAS [result]     \n\n\n-- Fix Column Names\nSELECT \n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )AS [result]\n\n-- Create External Data Source\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data\nWITH(\n    LOCATION = 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/'\n)\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH(\n    LOCATION = 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/raw'\n)\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )AS [result]\n\n\nDROP EXTERNAL DATA SOURCE nyc_taxi_data;\n\nSELECT name, location FROM sys.external_data_sources;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month + \n        ' WITH\n            (\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''silver/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT [VendorID] AS vendor_id\n                ,[lpep_pickup_datetime]\n                ,[lpep_dropoff_datetime]\n                ,[store_and_fwd_flag]\n                ,[total_amount]\n                ,[payment_type]\n                ,[trip_type]\n                ,[congestion_surcharge]\n                ,[extra]\n                ,[mta_tax]\n                ,[tip_amount]\n                ,[tolls_amount]\n                ,[ehail_fee]\n                ,[improvement_surcharge]\n                ,[RatecodeID] AS rate_code_id\n                ,[PULocationID] AS pu_location_id\n                ,[DOLocationID] AS do_location_id\n                ,[passenger_count]\n                ,[trip_distance]\n                ,[fare_amount]\n        FROM bronze.vw_trip_data_green_csv\n        WHERE year = ''' + @year + '''\n          AND month = ''' + @month + '''';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_data_sources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'nyc_taxi_src')\n    CREATE EXTERNAL DATA SOURCE nyc_taxi_src\n    WITH\n    (    LOCATION         = 'https://issynapsecoursedl.dfs.core.windows.net/nyc-taxi-data'\n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/descovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT *\n  FROM OPENROWSET(\n      BULK 'calendar.csv',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '2.0',\n      HEADER_ROW = TRUE\n  ) AS cal;\n\nEXEC sp_describe_first_result_set N'SELECT *\n  FROM OPENROWSET(\n      BULK ''calendar.csv'',\n      DATA_SOURCE = ''nyc_taxi_data_raw'',\n      FORMAT = ''CSV'',\n      PARSER_VERSION = ''2.0'',\n      HEADER_ROW = TRUE\n  ) AS cal\n'\n\nSELECT *\n  FROM OPENROWSET(\n      BULK 'calendar.csv',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '2.0',\n      HEADER_ROW = TRUE\n  ) \n  WITH (\n        date_key        INT,\n        date            DATE,\n        year            SMALLINT,\n        month           TINYINT,\n        day             TINYINT,\n        day_name        VARCHAR(10),\n        day_of_year     SMALLINT,\n        week_of_month   TINYINT,\n        week_of_year    TINYINT,\n        month_name      VARCHAR(10),\n        year_month      INT,\n        year_week       INT\n    )AS cal;\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month + \n        ' WITH\n            (\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''gold/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT td.year,\n            td.month,\n            tz.borough,\n            CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n            cal.day_name AS trip_day,\n            CASE WHEN cal.day_name IN (''Saturday'',''Sunday'') THEN ''Y'' ELSE ''N'' END AS trip_day_weekend_ind,\n            SUM(CASE WHEN pt.description = ''Credit card'' THEN 1 ELSE 0 END) AS card_trip_count,\n            SUM(CASE WHEN pt.description = ''Cash'' THEN 1 ELSE 0 END) AS cash_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 ELSE 0 END) AS street_hail_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 ELSE 0 END) AS dispatch_trip_count ,\n            SUM(td.trip_distance) AS trip_distance,\n            SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime, td.lpep_dropoff_datetime)) AS trip_duration,\n            SUM(td.fare_amount) AS fare_amount            \n        FROM silver.vw_trip_data_green td\n        JOIN silver.taxi_zone tz ON (td.pu_location_id = tz.location_id)\n        JOIN silver.calendar cal ON (cal.date = CONVERT(DATE, td.lpep_pickup_datetime))\n        JOIN silver.payment_type pt ON (td.payment_type = pt.payment_type)\n        JOIN silver.trip_type tt ON (td.trip_type = tt.trip_type)\n        WHERE td.year = ''' + @year + '''\n          AND td.month = ''' + @month + '''\n        GROUP BY td.year,\n                td.month,\n                tz.borough,\n                CONVERT(DATE, td.lpep_pickup_datetime),\n                cal.day_name  ';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Create file format csv_file_format for parser version 2.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='csv_file_format')\n  CREATE EXTERNAL FILE FORMAT csv_file_format  \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = ','  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '2.0' )   \n      );  \n\n-- Create file format csv_file_format_pv1 for parser version 1.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='csv_file_format_pv1')\n  CREATE EXTERNAL FILE FORMAT csv_file_format_pv1 \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = ','  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '1.0' )   \n      );  \n\n-- Create file format tsv_file_format for parser version 2.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='tsv_file_format')\n  CREATE EXTERNAL FILE FORMAT tsv_file_format  \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = '\\t'  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '2.0' )   \n      );  \n\n-- Create file format tsv_file_format for parser version 1.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='tsv_file_format_pv1')\n  CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1 \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = '\\t'  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '1.0' )   \n      );  \n\n-- Create external file format for parquet_file_format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='parquet_file_format')\n  CREATE EXTERNAL FILE FORMAT parquet_file_format  \n  WITH (  \n        FORMAT_TYPE = PARQUET,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n       ); \n\n\n-- Create external file format for delta_file_format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='delta_file_format')\n  CREATE EXTERNAL FILE FORMAT delta_file_format  \n  WITH (  \n        FORMAT_TYPE = DELTA,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n       ); \n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/descovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT *\n  FROM OPENROWSET(\n      BULK 'vendor_unquoted.csv',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '2.0',\n      HEADER_ROW = TRUE\n  ) AS vendor;\n\n\nSELECT *\n  FROM OPENROWSET(\n      BULK 'vendor_escaped.csv',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '2.0',\n      HEADER_ROW = TRUE,\n      ESCAPECHAR = '\\\\'\n  ) AS vendor;\n\nSELECT *\n  FROM OPENROWSET(\n      BULK 'vendor.csv',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '2.0',\n      HEADER_ROW = TRUE,\n      FIELDQUOTE = '\"'\n  ) AS vendor;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\nBEGIN\n    IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n        DROP EXTERNAL TABLE silver.taxi_zone;\n\n    CREATE EXTERNAL TABLE silver.taxi_zone\n        WITH\n        (\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/taxi_zone',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT *\n    FROM bronze.taxi_zone;\n\nEND;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Create taxi_zone table\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone;\n\nCREATE EXTERNAL TABLE bronze.taxi_zone\n    (   location_id SMALLINT ,\n        borough VARCHAR(15) ,\n        zone VARCHAR(50) ,\n        service_zone VARCHAR(15) )  \n    WITH (\n            LOCATION = 'raw/taxi_zone.csv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format_pv1,\n            REJECT_VALUE = 10,\n            REJECTED_ROW_LOCATION = 'rejections/taxi_zone'\n    );\n\nSELECT * FROM bronze.taxi_zone;\n\n-- Create calendar table\nIF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar;\n\nCREATE EXTERNAL TABLE bronze.calendar\n    (\n        date_key        INT,\n        date            DATE,\n        year            SMALLINT,\n        month           TINYINT,\n        day             TINYINT,\n        day_name        VARCHAR(10),\n        day_of_year     SMALLINT,\n        week_of_month   TINYINT,\n        week_of_year    TINYINT,\n        month_name      VARCHAR(10),\n        year_month      INT,\n        year_week       INT\n    )  \n    WITH (\n        LOCATION = 'raw/calendar.csv',  \n        DATA_SOURCE = nyc_taxi_src,  \n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/calendar'\n    );\n\nSELECT * FROM bronze.calendar;\n\n-- Create vendor table\nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor;\n\nCREATE EXTERNAL TABLE bronze.vendor\n    (\n        vendor_id       TINYINT,\n        vendor_name     VARCHAR(50)\n    )  \n    WITH (\n        LOCATION = 'raw/vendor.csv',  \n        DATA_SOURCE = nyc_taxi_src,  \n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/vendor'\n    );\n\nSELECT * FROM bronze.vendor;\n\n-- Create trip_type table\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type;\n\nCREATE EXTERNAL TABLE bronze.trip_type\n    (\n        trip_type       TINYINT,\n        trip_type_desc  VARCHAR(50)\n    )  \n    WITH (\n        LOCATION = 'raw/trip_type.tsv',  \n        DATA_SOURCE = nyc_taxi_src,  \n        FILE_FORMAT = tsv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/trip_type'\n    );\n\nSELECT * FROM bronze.trip_type;\n\n-- Create trip_data_green_csv table\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_csv/**',\n        DATA_SOURCE = nyc_taxi_src,   \n        FILE_FORMAT = csv_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_csv;\n\n-- Create trip_data_green_parquet table\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_parquet/**',\n        DATA_SOURCE = nyc_taxi_src,   \n        FILE_FORMAT = parquet_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_parquet;\n\n\n-- Create trip_data_green_delta table\nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_delta',\n        DATA_SOURCE = nyc_taxi_src,   \n        FILE_FORMAT = delta_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_delta;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_calendar\nAS\nBEGIN\n    IF OBJECT_ID('silver.calendar') IS NOT NULL\n        DROP EXTERNAL TABLE silver.calendar;\n\n    CREATE EXTERNAL TABLE silver.calendar\n        WITH\n        (\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/calendar',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT *\n    FROM bronze.calendar;\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n-- Create view for rate code file\nDROP VIEW IF EXISTS bronze.vw_rate_code\nGO\n\n\nCREATE VIEW bronze.vw_rate_code\nAS\nSELECT rate_code_id, rate_code\n  FROM OPENROWSET(\n      BULK 'raw/rate_code.json',\n      DATA_SOURCE = 'nyc_taxi_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b',\n      ROWTERMINATOR = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS rate_code\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      rate_code_id TINYINT,\n      rate_code VARCHAR(20) \n  )\nGO\n\nSELECT * FROM bronze.vw_rate_code\nGO\n\n-- Create view for payment type file\nDROP VIEW IF EXISTS bronze.vw_payment_type\nGO\n\nCREATE VIEW bronze.vw_payment_type\nAS\nSELECT payment_type, description\n  FROM OPENROWSET(\n      BULK 'raw/payment_type.json',\n      DATA_SOURCE = 'nyc_taxi_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      payment_type SMALLINT,\n      description VARCHAR(20) '$.payment_type_desc'\n  )\nGO\n\nSELECT * FROM bronze.vw_payment_type\nGO\n\n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS bronze.vw_trip_data_green_csv\nGO\n\nCREATE VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )\n    WITH (\n      VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result]\nGO\n\nSELECT TOP(100) *\n  FROM bronze.vw_trip_data_green_csv\nGO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_explore_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/descovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15)) payment_type_desc\n  FROM OPENROWSET(\n      BULK 'payment_type.json',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '1.0', \n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b',\n      ROWTERMINATOR = '0x0a'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type;\n\nEXEC sp_describe_first_result_set N'\n SELECT CAST(JSON_VALUE(jsonDoc, ''$.payment_type'') AS SMALLINT) payment_type,\n        CAST(JSON_VALUE(jsonDoc, ''$.payment_type_desc'') AS VARCHAR(15)) payment_type_desc\n  FROM OPENROWSET(\n      BULK ''payment_type.json'',\n      DATA_SOURCE = ''nyc_taxi_data_raw'',\n      FORMAT = ''CSV'',\n      PARSER_VERSION = ''1.0'', \n      FIELDTERMINATOR = ''0x0b'',\n      FIELDQUOTE = ''0x0b'',\n      ROWTERMINATOR = ''0x0a''\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type';  \n  \n\nSELECT payment_type, description\n  FROM OPENROWSET(\n      BULK 'payment_type.json',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      payment_type SMALLINT,\n      description VARCHAR(20) '$.payment_type_desc'\n  );\n\n-----------------------------------------------------\n-- Reading data from JSON with arrays\n-----------------------------------------------------\nSELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[0].value') AS VARCHAR(15)) payment_type_desc_0,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[1].value') AS VARCHAR(15)) payment_type_desc_01\n  FROM OPENROWSET(\n      BULK 'payment_type_array.json',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '1.0', \n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b',\n      ROWTERMINATOR = '0x0a'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type;\n\n-- Use openjson to explode the array\nSELECT  payment_type, payment_type_desc_value\n  FROM OPENROWSET(\n      BULK 'payment_type_array.json',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '1.0', \n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b',\n      ROWTERMINATOR = '0x0a'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH\n  (\n      payment_type SMALLINT,\n      payment_type_desc NVARCHAR(MAX) AS JSON\n  )\n  CROSS APPLY OPENJSON(payment_type_desc)\n  WITH(\n      sub_type SMALLINT,\n      payment_type_desc_value VARCHAR(20) '$.value'\n  );\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_usp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_type\nAS\nBEGIN\n    IF OBJECT_ID('silver.trip_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.trip_type;\n\n    CREATE EXTERNAL TABLE silver.trip_type\n        WITH\n        (\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/trip_type',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT *\n    FROM bronze.trip_type;\n\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone\nGO\n\nCREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.taxi_zone;\n\n\n SELECT * FROM silver.taxi_zone; \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_usp_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_vendor\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.vendor') IS NOT NULL\n        DROP EXTERNAL TABLE silver.vendor;\n\n    CREATE EXTERNAL TABLE silver.vendor\n        WITH\n        (\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/vendor',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT *\n    FROM bronze.vendor;\n\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\nGO\n\nCREATE EXTERNAL TABLE silver.calendar\n    WITH\n    (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/calendar',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.calendar;\n\n\nSELECT * FROM silver.calendar; \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/descovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- Select data from a folder\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n-- Select data from subfolders\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- Get data from more than one file\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- Use more than 1 wildcard character\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n-- File metadata function filename()\nSELECT\n    TOP 100 \n    result.filename() AS file_name,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\nSELECT\n    result.filename() AS file_name,\n    COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGROUP BY result.filename()\nORDER BY result.filename();\n\n-- Limit Data using filename()\nSELECT\n    result.filename() AS file_name,\n    COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nWHERE result.filename() IN ('green_tripdata_2020-01.csv', 'green_tripdata_2021-01.csv')\nGROUP BY result.filename()\nORDER BY result.filename();\n\n-- Use filepath function\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGROUP BY result.filename(), result.filepath(1), result.filepath(2)\nORDER BY result.filename(), result.filepath(1), result.filepath(2);\n\n-- Use file path in the where clause\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nWHERE result.filepath(1) >= '2021'\n--  AND result.filepath(2) IN ('06', '07', '08')\nGROUP BY result.filename(), result.filepath(1), result.filepath(2)\nORDER BY result.filename(), result.filepath(1), result.filepath(2);\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_usp_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_rate_code\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.rate_code') IS NOT NULL\n        DROP EXTERNAL TABLE silver.rate_code;\n\n    CREATE EXTERNAL TABLE silver.rate_code\n        WITH\n        (\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/rate_code',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT rate_code_id, rate_code\n    FROM OPENROWSET(\n        BULK 'raw/rate_code.json',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH\n    (\n        jsonDoc NVARCHAR(MAX)\n    ) AS rate_code\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20) \n    );\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type\nGO\n\nCREATE EXTERNAL TABLE silver.trip_type\n    WITH\n    (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/trip_type',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.trip_type;\n\n\n SELECT * FROM silver.trip_type; \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/descovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n\n-- Identify the interred data types\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01/'',\n        FORMAT = ''PARQUET'',\n        DATA_SOURCE = ''nyc_taxi_data_raw''\n    ) AS [result]'\n\n-- Define Columns and data types\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    )  \n    WITH (\n      VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result]\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    )  \n    WITH (\n        tip_amount FLOAT,\n        trip_type INT\n  ) AS [result]\n\n/*\nAssignment\n----------\n1) query from folders using wildcard characters\n2) use filename function\n3) query from subfolders\n4) use filepath function to select only from certain partitions\n*/\n\n-- 1) Query using wildcard characters\nSELECT TOP 100 *\n  FROM OPENROWSET (\n      BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'PARQUET'\n  ) AS trip_data\n\n-- 2) Get filename \nSELECT TOP 100\n       trip_data.filename() AS file_name,\n       trip_data.*\n  FROM OPENROWSET (\n      BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'PARQUET'\n  ) AS trip_data\n\n\n-- 3) Query from sub folders\nSELECT TOP 100\n       trip_data.filepath() AS file_path,\n       trip_data.*\n  FROM OPENROWSET (\n      BULK 'trip_data_green_parquet/**',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'PARQUET'\n  ) AS trip_data\n\n-- 4) Use filepath to target partitions\nSELECT trip_data.filepath(1) AS year,\n       trip_data.filepath(2) AS month,\n       COUNT(1) AS record_count\n  FROM OPENROWSET (\n      BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'PARQUET'\n  ) AS trip_data\n WHERE trip_data.filepath(1) = '2020'\n   AND trip_data.filepath(2) IN ('06', '07', '08')\nGROUP BY trip_data.filepath(1), trip_data.filepath(2)\nORDER BY trip_data.filepath(1), trip_data.filepath(2);\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_usp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_payment_type\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.payment_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.payment_type;\n\n    CREATE EXTERNAL TABLE silver.payment_type\n        WITH\n        (\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/payment_type',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT payment_type, description\n    FROM OPENROWSET(\n        BULK 'raw/payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    )\n    WITH\n    (\n        jsonDoc NVARCHAR(MAX)\n    ) AS payment_type\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        payment_type SMALLINT,\n        description VARCHAR(20) '$.payment_type_desc'\n    );\n\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendor\nGO\n\nCREATE EXTERNAL TABLE silver.vendor\n    WITH\n    (\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/vendor',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.vendor;\n\n\n SELECT * FROM silver.vendor; \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CREATE DATA SOURCES')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/dll"
				},
				"content": {
					"query": "USE adv_raw\nGo\nCREATE EXTERNAL FILE FORMAT ParquetFormat WITH (  FORMAT_TYPE = PARQUET );\nGO\nCREATE EXTERNAL FILE FORMAT DeltaLakeFormat WITH (  FORMAT_TYPE = DELTA );\nGO\n\n--abfss://dventure-works@issynapsecoursedl.dfs.core.windows.net/Source\n--https://issynapsecoursedl.dfs.core.windows.net/adventure-works/Source/Sales/Sales.csv\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'adw_sources')\n    CREATE EXTERNAL DATA SOURCE adw_sources\n    WITH\n    (    LOCATION         = 'https://issynapsecoursedl.dfs.core.windows.net/adventure-works/sources'\n    );\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'adw_raw')\n    CREATE EXTERNAL DATA SOURCE adw_raw\n    WITH\n    (    LOCATION         = 'https://issynapsecoursedl.dfs.core.windows.net/adventure-works/raw'\n    );\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'adw_edw')\n    CREATE EXTERNAL DATA SOURCE adw_edw\n    WITH\n    (    LOCATION         = 'https://issynapsecoursedl.dfs.core.windows.net/adventure-works/edw'\n    );\n\n\nSELECT name, location FROM sys.external_data_sources;\n\n-- DROP EXTERNAL DATA SOURCE adw_raw;\n-- DROP EXTERNAL DATA SOURCE adw_edw;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CREATE DATABASE AND SCHEMA')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/dll"
				},
				"content": {
					"query": "USE master\nGO\n\n--drop DATABASE if EXISTS adv_raw;\n\n\nCREATE DATABASE adv_raw\nGO\n\nALTER DATABASE adv_raw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\nUSE adv_raw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_bronze_CALENDAR_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/raw/bronze"
				},
				"content": {
					"query": "USE adv_raw\nGO\n\nDROP VIEW IF EXISTS bronze.vw_calendar\nGO\n\nCREATE VIEW bronze.vw_calendar\nAS\nSELECT DateKey as date_id\n     , MonthKey as month_id\n     , Month as fiscal_month\n     , FiscalQuarter as fiscal_quarter\n     , FiscalYear as fiscal_year\nFROM\n    OPENROWSET(\n        BULK 'Date/Date.csv',\n        DATA_SOURCE = 'adw_sources',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) \n    WITH (\n        DateKey\tinteger 1,\n--        Date\tVARCHAR(10) 2 ,\n        FiscalYear\tVARCHAR(10) 3 ,\n        FiscalQuarter\tVARCHAR(10) 4,\n        Month\tVARCHAR(10) 5,\n--        FullDate\tVARCHAR(10) 6,\n        MonthKey\tVARCHAR(10) 7\n\n\n    )\nAS r",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_bronze_PRODUCTS_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/raw/bronze"
				},
				"content": {
					"query": "USE adv_raw\nGO\n\nDROP VIEW IF EXISTS bronze.vw_products\nGO\n\nCREATE VIEW bronze.vw_products\nAS\nSELECT ProductKey as product_id\n     , SKU as sku_num\n     , Product as product_nm\n     , Category as category_nm\n     , Subcategory as sub_category_nm\n     , ListPrice as list_price_amt\n     , StandardCost as standard_cost_amt\n     , Color as color_nm\n     , Model as model_nm\nFROM\n    OPENROWSET(\n        BULK 'ProductData/ProductData.csv',\n        DATA_SOURCE = 'adw_sources',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) \n    WITH (\n        Category\tVARCHAR(100) 1,\n        Subcategory\tVARCHAR(100) 2,\n        Model\tVARCHAR(200) 3,\n        ListPrice\tdecimal(8,2) 4,\n        Color\tVARCHAR(100) 5, \n        StandardCost\tdecimal(8,2) 6,\n        Product\tVARCHAR(200) 7,\n        SKU\tVARCHAR(100) 8, \n        ProductKey\tinteger 9\n    )\nAS r",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_bronze_SALES_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/raw/bronze"
				},
				"content": {
					"query": "USE adv_raw\nGO\n\nDROP VIEW IF EXISTS bronze.vw_sales\nGO\n\nCREATE VIEW bronze.vw_sales\nAS\nSELECT SalesOrderLineKey as pos_transaction_id\n     , ProductKey as product_id\n\t , UnitPrice as item_price\n\t , OrderQuantity as item_qty\n\t , ProductStandardCost as item_cost\n\t , SalesAmount as total_sales_amt\n\t , TotalProductCost as total_cost_amt\n     , UnitPriceDiscountPct as item_price_disc\n     , ExtendedAmount as extended_amt\n     , SalesTerritoryKey as sales_territory_id\n     , OrderDateKey as order_dt\n     , CustomerKey as customer_id\n     , ResellerKey as reseller_id\n   \t , ShipDateKey as transaction_dt\n\t , DueDateKey as batch_dt\nFROM\n    OPENROWSET(\n        BULK 'Sales/Sales.csv',\n        DATA_SOURCE = 'adw_sources',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) \n    WITH (\n        SalesAmount\tdecimal(8,2) 1,\n        TotalProductCost\tdecimal(8,2) 2,\n        ProductStandardCost\tdecimal(8,2) 3,\n        UnitPriceDiscountPct\tdecimal(8,2) 4,\n        ExtendedAmount\tdecimal(8,2) 5,\n        UnitPrice\tdecimal(8,2) 6,\n        OrderQuantity\tinteger 7,\n        SalesTerritoryKey\tinteger 8,\n        ShipDateKey\tinteger 9,\n        DueDateKey\tinteger 10,\n        OrderDateKey\tinteger 11,\n        ProductKey\tinteger 12,\n        CustomerKey\tinteger 13,\n        ResellerKey\tinteger 14,\n        SalesOrderLineKey\tinteger 15\n    )\n    AS r",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/raw/silver/calendar"
				},
				"content": {
					"query": "USE adv_raw\ngo \n\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\nGO\n\n-- Create table\nCREATE EXTERNAL TABLE silver.calendar\nWITH (LOCATION = 'calendar/', DATA_SOURCE = [adw_raw], FILE_FORMAT = [ParquetFormat])\nAS\n  select cast(date_id as int) as day_id\n\t   , cast(month_id as int) as month_id\n\t   , cast(substring(month_id,1,4) as int)  year_id\n       , fiscal_month as fiscal_month_nm\n       , fiscal_quarter as fiscal_quarter_nm\n       , fiscal_year as fiscal_year_nm\n    from bronze.vw_calendar\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_silver_products')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/raw/silver/products"
				},
				"content": {
					"query": "IF OBJECT_ID('silver.products') IS NOT NULL\n    DROP EXTERNAL TABLE silver.products\nGO\n\n-- Create table\nCREATE EXTERNAL TABLE silver.products\n(\n\tproduct_id INT,\t\n\tsku_num VARCHAR(100),\n\tproduct_nm VARCHAR(200),\n\tcategory_nm VARCHAR(100),\n\tsub_category_nm VARCHAR(100),\n\titem_price_amt decimal(8,2),\n\tstandard_cost_amt decimal(8,2),\n\tcolor_nm VARCHAR(100),\n\tmodel_nm VARCHAR(200)\n)\nWITH (LOCATION = 'products/**', DATA_SOURCE = [adw_raw], FILE_FORMAT = [ParquetFormat])\nGO\n\n-- Create view\nDROP VIEW IF EXISTS silver.vw_products\nGO\n\nCREATE VIEW silver.vw_products\nAS\nSELECT\n    \n    result.*, result.filepath(1) AS batch_dt\nFROM\n    OPENROWSET(\n        BULK 'products/batch_dt=*/*.parquet',\n        DATA_SOURCE = 'adw_raw',\n        FORMAT = 'PARQUET'\n    )\n  WITH (\n\tproduct_id INT,\t\n\tsku_num VARCHAR(100),\n\tproduct_nm VARCHAR(200),\n\tcategory_nm VARCHAR(100),\n\tsub_category_nm VARCHAR(100),\n\titem_price_amt decimal(8,2),\n\tstandard_cost_amt decimal(8,2),\n\tcolor_nm VARCHAR(100),\n\tmodel_nm VARCHAR(200)\n  ) AS [result]\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_silver_sales')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/raw/silver/sales"
				},
				"content": {
					"query": "IF OBJECT_ID('silver.sales') IS NOT NULL\n    DROP EXTERNAL TABLE silver.sales\nGO\n\n-- Create table\nCREATE EXTERNAL TABLE silver.sales\n(\n\t[pos_transaction_id] [int],\n\t[product_id] [int],\n\t[item_price] [numeric](8, 2),\n\t[item_qty] [int],\n\t[item_cost] [numeric](8, 2),\n\t[total_sales_amt] [numeric](8, 2),\n\t[total_cost_amt] [numeric](8, 2),\n\t[transaction_dt] [int]\n)\nWITH (LOCATION = 'sales/**', DATA_SOURCE = [adw_raw], FILE_FORMAT = [ParquetFormat])\nGO\n\n-- Create view\nDROP VIEW IF EXISTS silver.vw_sales\nGO\n\nCREATE VIEW silver.vw_sales\nAS\nSELECT\n    \n    result.*, result.filepath(1) AS batch_dt\nFROM\n    OPENROWSET(\n        BULK 'sales/batch_dt=*/*.parquet',\n        DATA_SOURCE = 'adw_raw',\n        FORMAT = 'PARQUET'\n    )\n  WITH (\n\t[pos_transaction_id] [int],\n\t[product_id] [int],\n\t[item_price] [numeric](8, 2),\n\t[item_qty] [int],\n\t[item_cost] [numeric](8, 2),\n\t[total_sales_amt] [numeric](8, 2),\n\t[total_cost_amt] [numeric](8, 2),\n\t[transaction_dt] [int]\n  ) AS [result]\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/serverless_cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course/utils"
				},
				"content": {
					"query": "select * from sys.configurations where name like 'Data Processed %';\n\nselect * from sys.dm_external_data_processed;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_load_products_raw')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/raw/silver/products"
				},
				"content": {
					"query": "USE adv_raw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_load_products_raw\n@esp_dt VARCHAR(8)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.products_' + @esp_dt  + \n        ' WITH\n            (\n                DATA_SOURCE = adw_raw,\n                LOCATION = ''products/batch_dt=' + @esp_dt + ''',\n                FILE_FORMAT = ParquetFormat\n            )\n        AS\n        select p.product_id\n             , p.sku_num\n             , p.product_nm\n             , p.category_nm\n             , p.sub_category_nm\n             , s.item_price as item_price_amt\n             , p.standard_cost_amt  \n             , p.color_nm, p.model_nm\n             , s.batch_dt\n          from bronze.vw_products p join silver.vw_sales s \n            on p.product_id  = s.product_id\n         where s.batch_dt = ''' + @esp_dt + '''\n        ';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE silver.products_' + @esp_dt ;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_load_sales_raw')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/raw/silver/sales"
				},
				"content": {
					"query": "USE adv_raw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_load_sales_raw\n@esp_dt VARCHAR(8)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.sales_' + @esp_dt  + \n        ' WITH\n            (\n                DATA_SOURCE = adw_raw,\n                LOCATION = ''sales/batch_dt=' + @esp_dt + ''',\n                FILE_FORMAT = ParquetFormat\n            )\n        AS\n        SELECT pos_transaction_id\n            , product_id\n            , item_price\n            , item_qty\n            , item_cost\n            , total_sales_amt\n            , total_cost_amt\n            , transaction_dt\n        FROM bronze.vw_sales\n        WHERE batch_dt = ''' + @esp_dt + '''\n        ';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE silver.sales_' + @esp_dt ;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "adv_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_spark_create_gold_trip_data_green_agg')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1e050b89-97cf-4354-bb8a-a1157e051e07"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Trip Data Aggregation \n",
							"### Group By Columns\n",
							"1. year\n",
							"2. Month\n",
							"3. Pickup Location ID\n",
							"4. Drop Off Location ID\n",
							"\n",
							"### Aggregated Columns\n",
							"1. Total Trip Count\n",
							"2. Total Fare Amount\n",
							"\n",
							"### Purpose of the notebook\n",
							"\n",
							"Demonstrate the integration between Spark Pool and Serverless SQL Pool\n",
							"\n",
							"1. Create the aggregated table in Spark Pool\n",
							"2. Access the data from Serverless SQL Pool "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the folder paths so that it can be used later. \n",
							"bronze_folder_path = 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/raw'\n",
							"silver_folder_path = 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/silver'\n",
							"gold_folder_path = 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/gold'"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the spark config to be able to get the partitioned columns year and month as strings rather than integers\n",
							"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"\n",
							"-- Create database to which we are going to write the data\n",
							"\n",
							"CREATE DATABASE IF NOT EXISTS nyc_taxi_ldw_spark LOCATION 'abfss://nyc-taxi-data@issynapsecoursedl.dfs.core.windows.net/gold';"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read the silver data to be processed. \n",
							"trip_data_green_df = spark.read.parquet(f\"{silver_folder_path}/trip_data_green\") \n",
							"trip_data_green_df.createOrReplaceTempView('ref_silver_trip_data_green')"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations\n",
							"# 1. Total trip count\n",
							"# 2. Total fare amount\n",
							"\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"trip_data_green_agg_df = trip_data_green_df \\\n",
							"                        .groupBy(\"year\", \"month\", \"pu_location_id\", \"do_location_id\") \\\n",
							"                        .agg(count(lit(1)).alias(\"total_trip_count\"),\n",
							"                        round(sum(\"fare_amount\"), 2).alias(\"total_fare_amount\"))"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write the aggregated data to the gold table for consumption\n",
							"\n",
							"trip_data_green_agg_df.repartition(2).write.mode(\"overwrite\").partitionBy(\"year\", \"month\").format(\"parquet\").saveAsTable(\"nyc_taxi_ldw_spark.trip_data_green_agg\")"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"insert overwrite table nyc_taxi_ldw_spark.trip_data_green_agg partition (year='2022', month)\r\n",
							"select pu_location_id, do_location_id, count(*) total_trip_count, sum(fare_amount) as total_fare_amount,  month\r\n",
							"  from ref_silver_trip_data_green\r\n",
							" where year=2020\r\n",
							" group by year, month, pu_location_id, do_location_id\r\n",
							" distribute by year, month\r\n",
							""
						],
						"outputs": [],
						"execution_count": 39
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delta Lake Demo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fec30e85-c519-49d6-a13d-00fb190535d8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Define column headers\r\n",
							"columns = [\"Employee\",\"Salary\"]\r\n",
							"\r\n",
							"# Define data for original dataframe\r\n",
							"empOriginal = [(\"Employee_1\",50000),(\"Employee_2\",55000)]\r\n",
							"\r\n",
							"# Define data for updates dataframe\r\n",
							"empUpdates = [(\"Employee_1\",50000),(\"Employee_2\",60000),(\"Employee_3\",55000)]\r\n",
							"\r\n",
							"# Create dataframe with orignial employee data\r\n",
							"dfOriginal = spark.createDataFrame(data = empOriginal,schema = columns)\r\n",
							"\r\n",
							"# Create dataframe with updated employee data\r\n",
							"dfUpdates = spark.createDataFrame(data = empUpdates,schema = columns)\r\n",
							"\r\n",
							"# Display dfOriginal\r\n",
							"dfOriginal.show()\r\n",
							"\r\n",
							"# Display dfUpdates\r\n",
							"dfUpdates.show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create temp views of both the dfOriginal and dfUpdates dataframes \r\n",
							"# so that we can easily query them with Spark SQL later\r\n",
							"\r\n",
							"#dfOriginal\r\n",
							"dfOriginal.createOrReplaceTempView('Employee_Original')\r\n",
							"\r\n",
							"#dfUpdates\r\n",
							"dfUpdates.createOrReplaceTempView('Employee_Updates')"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"-- Create Delta Lake table, define schema and location\r\n",
							"CREATE TABLE IF NOT EXISTS DELTA_Employees (\r\n",
							"  Employee STRING NOT NULL,\r\n",
							"  Salary INT NOT NULL,\r\n",
							"  BeginDate DATE NOT NULL,\r\n",
							"  EndDate DATE NOT NULL,\r\n",
							"  CurrentRecord INT NOT NULL \r\n",
							")\r\n",
							"USING DELTA\r\n",
							"-- specify data lake folder location\r\n",
							"LOCATION '/Delta_Demo/Employees/' "
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"-- Merge statement to handle upsert of dfOrginal dataset into DELTA_Employees table\r\n",
							"MERGE INTO delta_employees t\r\n",
							"USING (\r\n",
							"    SELECT emp.Employee AS MergeKey, emp.*\r\n",
							"    FROM Employee_Original AS emp\r\n",
							"\r\n",
							"    UNION ALL\r\n",
							"\r\n",
							"    SELECT NULL AS MergeKey, emp.*\r\n",
							"    FROM Employee_Original AS emp\r\n",
							"    JOIN delta_employees AS de ON emp.Employee = de.Employee\r\n",
							"    WHERE de.CurrentRecord = 1 AND emp.Salary <> de.Salary\r\n",
							") s\r\n",
							"ON t.Employee = s.MergeKey\r\n",
							"WHEN MATCHED AND t.CurrentRecord = 1 AND t.Salary <> s.Salary THEN\r\n",
							"  UPDATE SET t.CurrentRecord = 0, t.EndDate = (CURRENT_DATE)\r\n",
							"WHEN NOT MATCHED THEN\r\n",
							"  INSERT (Employee, Salary, BeginDate, EndDate, CurrentRecord) VALUES (s.Employee, s.Salary, CURRENT_DATE, '2999-12-31',1)\r\n",
							"\r\n",
							"\r\n",
							"   "
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"-- Merge statement to handle upsert of dfUpdates into DELTA_Employees table\r\n",
							"MERGE INTO delta_employees t\r\n",
							"USING (\r\n",
							"    SELECT emp.Employee AS MergeKey, emp.*\r\n",
							"    FROM Employee_Updates AS emp\r\n",
							"\r\n",
							"    UNION ALL\r\n",
							"\r\n",
							"    SELECT NULL AS MergeKey, emp.*\r\n",
							"    FROM Employee_Updates AS emp\r\n",
							"    JOIN delta_employees AS de ON emp.Employee = de.Employee\r\n",
							"    WHERE de.CurrentRecord = 1 AND emp.Salary <> de.Salary\r\n",
							") s\r\n",
							"ON t.Employee = s.MergeKey\r\n",
							"WHEN MATCHED AND t.CurrentRecord = 1 AND t.Salary <> s.Salary THEN\r\n",
							"  UPDATE SET t.CurrentRecord = 0, t.EndDate = (CURRENT_DATE)\r\n",
							"WHEN NOT MATCHED THEN\r\n",
							"  INSERT (Employee, Salary, BeginDate, EndDate, CurrentRecord) VALUES (s.Employee, s.Salary, CURRENT_DATE, '2999-12-31',1)"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"-- Retrieve the version/change history of the Delta table\r\n",
							"DESCRIBE HISTORY default.DELTA_Employees"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"# Load a previous version of the DELTA_Employees table into a dataframe\r\n",
							"df = spark.read.format(\"delta\").option(\"versionAsOf\", 2).load(\"/Delta_Demo/Employees/\")\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# A compact will let us write out the contents of our Delta table into a specified number of files.\r\n",
							"(spark.read\r\n",
							" .format(\"delta\")\r\n",
							" .load(\"/Delta_Demo/Employees/\") #delta table folder to read from\r\n",
							" .repartition(1) #number of files to write\r\n",
							" .write\r\n",
							" .option(\"dataChange\", \"false\") #do not change the data\r\n",
							" .format(\"delta\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" .save(\"/Delta_Demo/Employees/\")) #location to write new file(s)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--Vacuum files where table version is older than 10 days \r\n",
							"VACUUM default.DELTA_Employees RETAIN 240 HOURS"
						],
						"outputs": [],
						"execution_count": 23
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dev Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "course"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fdc98d2a-f758-4558-a74d-5e2d3dae710e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"esp_date = 20170711\r\n",
							"base_path = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\"\r\n",
							"raw_folder_path = f'{base_path}/raw'\r\n",
							"sys = mssparkutils.notebook\r\n",
							"\r\n",
							"try:\r\n",
							"    raw_df = spark.read.parquet(f\"{raw_folder_path}/products/batch_dt={esp_date}/*.parquet\")\r\n",
							"except:\r\n",
							"    sys.exit(f\"cannot load batch_dt={esp_date} file\")  \r\n",
							"    \r\n",
							"raw_df.createOrReplaceTempView('ref_product_raw')\r\n",
							"raw_df.show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"USE adv_edw;\r\n",
							"\r\n",
							"DROP table if exists caledar_dim;"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_backfill_product_dim')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/pySpark/product_dim"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9224a5fd-2346-4234-b0cc-567b3e9d0494"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Recreate Target table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"USE adv_edw;\r\n",
							"\r\n",
							"DROP table if exists product_dim;\r\n",
							"\r\n",
							"CREATE TABLE IF NOT EXISTS product_dim (\r\n",
							"\tsku_num VARCHAR(100) not null,\r\n",
							"    effective_date date,\r\n",
							"    end_date date,\r\n",
							"\tproduct_nm VARCHAR(200),\r\n",
							"\tcategory_nm VARCHAR(100),\r\n",
							"\tsub_category_nm VARCHAR(100),\r\n",
							"\titem_price_amt decimal(8,2),\r\n",
							"\tstandard_cost_amt decimal(8,2),\r\n",
							"\tcolor_nm VARCHAR(100),\r\n",
							"\tload_ts timestamp,\r\n",
							"\traw_batch_dt int,\r\n",
							"    current_record_ind int\r\n",
							")\r\n",
							"USING DELTA\r\n",
							"PARTITIONED BY (current_record_ind)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Init parameters"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"batch_start_date = \"20170711\"\r\n",
							"batch_end_date = \"20170715\"\r\n",
							"path_base = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Read source table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.read.parquet(f\"{path_base}/raw/products/\").createOrReplaceTempView('ref_raw_products')\r\n",
							"spark.conf.set(\"batch_start_date\", batch_start_date)\r\n",
							"spark.conf.set(\"batch_end_date\", batch_end_date)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Write to target table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"%%sql\r\n",
							"\r\n",
							"insert overwrite table adv_edw.product_dim partition(current_record_ind)\r\n",
							"select \r\n",
							"       sku_num\r\n",
							"     , to_date(${batch_end_date},\"yyyyMMdd\") as effective_date\r\n",
							"     , '9999-12-31' as end_date\r\n",
							"      , product_nm\r\n",
							"      , category_nm\r\n",
							"      , sub_category_nm\r\n",
							"      , item_price_amt\r\n",
							"      , standard_cost_amt\r\n",
							"      , color_nm\r\n",
							"      , CURRENT_TIMESTAMP as load_ts\r\n",
							"      , batch_dt as raw_batch_dt\r\n",
							"      , 1 as current_record_ind\r\n",
							"  from (\r\n",
							"        select *\r\n",
							"            , row_number()  OVER (PARTITION BY sku_num ORDER BY batch_dt desc) AS last_value\r\n",
							"        from ref_raw_products\r\n",
							"       where batch_dt between ${batch_start_date} and ${batch_end_date} \r\n",
							"      ) v\r\n",
							"  where last_value = 1\r\n",
							"  distribute by current_record_ind\r\n",
							"        sort by sku_num"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"--Vacuum files where table version is older than 7 days \r\n",
							"VACUUM adv_edw.product_dim RETAIN 168 HOURS;\r\n",
							"\r\n",
							"-- Retrieve the version/change history of the Delta table\r\n",
							"--DESCRIBE HISTORY avd_edw.products_dim;"
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_backfill_sales_fct')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/pySpark/sales_fct"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9e6743aa-0299-4603-84a1-b5543d4cebcc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Recreate Target table "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"USE adv_edw;\r\n",
							"\r\n",
							"DROP table if exists sales_fct;\r\n",
							"\r\n",
							"CREATE TABLE IF NOT EXISTS sales_fct (\r\n",
							"\tpos_transaction_id int,\r\n",
							"\tsku_num varchar(100),\r\n",
							"\titem_price_amt decimal(8,2),\r\n",
							"\titem_qty int,\r\n",
							"\traw_batch_dt int,\r\n",
							"\tload_ts timestamp,\r\n",
							"    transaction_date date\r\n",
							"\t)\r\n",
							"USING DELTA\r\n",
							"PARTITIONED BY (transaction_date)\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Init parameters"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"batch_start_date = \"20170711\"\r\n",
							"batch_end_date = \"20170715\"\r\n",
							"path_base = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Read source tables"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Read Products RAW table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df = spark.read.parquet(f\"{path_base}/raw/products/\")\r\n",
							"df.filter(f\"batch_dt between {batch_start_date} AND {batch_end_date} \") \r\n",
							"df.createOrReplaceTempView('ref_raw_products')\r\n",
							"\r\n",
							"#display(df.limit(5))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Read Sales RAW table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"#path_raw_sales = f'{path_base}/raw/sales/'\r\n",
							"#spark.read.option(\"basePath\", path_raw_sales).parquet(f\"{path_raw_sales}/batch_dt=*/*.parquet\").createOrReplaceTempView('ref_raw')\r\n",
							"\r\n",
							"spark.read.parquet(f'{path_base}/raw/sales/').createOrReplaceTempView('ref_raw_sales')\r\n",
							" \r\n",
							"sql = f\"\"\"\r\n",
							"select \r\n",
							"       s.pos_transaction_id\r\n",
							"     , p.sku_num\r\n",
							"     , s.item_price as item_price_amt\r\n",
							"     , s.item_qty \r\n",
							"     , s.batch_dt as raw_batch_dt\r\n",
							"     , CURRENT_TIMESTAMP as load_ts \r\n",
							"     , to_date(s.transaction_dt,\"yyyyMMdd\") as transaction_date\r\n",
							"  from ref_raw_sales s\r\n",
							"  left join ref_raw_products p on s.product_id = p.product_id and s.batch_dt = p.batch_dt\r\n",
							" where s.batch_dt between {batch_start_date} AND {batch_end_date}\r\n",
							"\"\"\"\r\n",
							"raw_df = spark.sql(sql)\r\n",
							"raw_df.createOrReplaceTempView('ref_stg_sales')\r\n",
							"\r\n",
							"raw_df.show(5)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Write to target table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SET spark.sql.sources.partitionOverwriteMode=dynamic;\r\n",
							"\r\n",
							"insert overwrite table sales_fct partition(transaction_date)\r\n",
							"select pos_transaction_id\r\n",
							"     , sku_num\r\n",
							"     , item_price_amt\r\n",
							"     , item_qty \r\n",
							"     , raw_batch_dt\r\n",
							"     , load_ts \r\n",
							"     , transaction_date\r\n",
							"  from ref_stg_sales\r\n",
							"  ;\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_ongoing_calendar_dim')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/pySpark/calendar_dim"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "41c1bdc5-f27f-43cf-a902-4783532a048a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"base_path = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\"\r\n",
							"\r\n",
							"sys = mssparkutils.notebook\r\n",
							"\r\n",
							"raw_folder_path = f'{base_path}/raw'\r\n",
							"\r\n",
							"try:\r\n",
							"    raw_df = spark.read.parquet(f\"{raw_folder_path}/calendar/*.parquet\")\r\n",
							"except:\r\n",
							"    sys.exit(f\"cannot read calendar table\")  \r\n",
							"\r\n",
							"raw_df.createOrReplaceTempView('ref_raw')\r\n",
							"\r\n",
							"sql = f\"\"\"\r\n",
							"select \r\n",
							"       day_id\r\n",
							"      ,month_id\r\n",
							"      ,year_id\r\n",
							"      ,fiscal_month_nm\r\n",
							"      ,fiscal_quarter_nm\r\n",
							"      ,fiscal_year_nm\r\n",
							"      , CURRENT_TIMESTAMP as load_ts \r\n",
							"  from ref_raw\r\n",
							"\"\"\"\r\n",
							"raw_df = spark.sql(sql)\r\n",
							"raw_df.createOrReplaceTempView('ref_raw')\r\n",
							"#raw_df.show(50)\r\n",
							"\r\n",
							"raw_df.repartition(1).write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"adv_edw.calendar_dim\")"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"DESCRIBE HISTORY adv_edw.calendar_dim"
						],
						"outputs": [],
						"execution_count": 41
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_ongoing_product_dim')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/pySpark/product_dim"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8a312294-bbb3-4f19-b5d1-8953cb30f61b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"esp_date = \"20170718\"\r\n",
							"base_path = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\""
						],
						"outputs": [],
						"execution_count": 71
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"spark.conf.set(\"esp_date\", esp_date)  \r\n",
							"\r\n",
							"try:\r\n",
							"    spark.read.parquet(f\"{base_path}/raw/products/batch_dt={esp_date}/*.parquet\").createOrReplaceTempView('ref_product_raw')\r\n",
							"except:\r\n",
							"    mssparkutils.notebook.exit(f\"cannot load batch_dt={esp_date} file\")  \r\n",
							"\r\n",
							"sql = f\"\"\"\r\n",
							"select \r\n",
							"      sku_num, product_nm, category_nm, sub_category_nm\r\n",
							"    , item_price_amt, standard_cost_amt, color_nm, model_nm\r\n",
							"    , CURRENT_TIMESTAMP as load_ts \r\n",
							"    , batch_dt as raw_batch_dt \r\n",
							"  from (\r\n",
							"        select *\r\n",
							"            , row_number()  OVER (PARTITION BY sku_num ORDER BY batch_dt desc) AS last_value\r\n",
							"        from ref_product_raw\r\n",
							"      )\r\n",
							"where last_value = 1\r\n",
							"\"\"\"\r\n",
							"raw_df = spark.sql(sql)\r\n",
							"raw_df.createOrReplaceTempView('ref_product_raw')\r\n",
							"#raw_df.show(50)"
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- Merge statement to handle upsert of RAW dataset into TRG table\r\n",
							"MERGE INTO adv_edw.product_dim t\r\n",
							"USING (\r\n",
							"    SELECT sku_num AS MergeKey, \r\n",
							"           raw.sku_num, raw.product_nm, raw.category_nm, raw.sub_category_nm\r\n",
							"         , raw.item_price_amt, raw.standard_cost_amt, raw.color_nm\r\n",
							"         , raw.load_ts, raw.raw_batch_dt\r\n",
							"    FROM ref_product_raw raw\r\n",
							"\r\n",
							"    UNION ALL\r\n",
							"\r\n",
							"    SELECT null AS MergeKey, \r\n",
							"           raw.sku_num, raw.product_nm, raw.category_nm, raw.sub_category_nm\r\n",
							"         , raw.item_price_amt, raw.standard_cost_amt, raw.color_nm\r\n",
							"         , raw.load_ts, raw.raw_batch_dt\r\n",
							"    FROM ref_product_raw AS raw\r\n",
							"    JOIN adv_edw.product_dim AS trg ON trg.sku_num = raw.sku_num\r\n",
							"    WHERE trg.current_record_ind = 1 \r\n",
							"      AND ( trg.product_nm <> raw.product_nm\r\n",
							"         or trg.item_price_amt <> raw.item_price_amt\r\n",
							"          )\r\n",
							") s\r\n",
							"ON t.sku_num = s.MergeKey\r\n",
							"WHEN MATCHED AND t.current_record_ind = 1 \r\n",
							" AND ( t.product_nm <> s.product_nm\r\n",
							"    or t.category_nm <> s.category_nm\r\n",
							"    or t.sub_category_nm <> s.sub_category_nm\r\n",
							"    or t.item_price_amt <> s.item_price_amt\r\n",
							"    or t.standard_cost_amt <> s.standard_cost_amt\r\n",
							"    or t.color_nm <> s.color_nm\r\n",
							"    )\r\n",
							" THEN\r\n",
							"  UPDATE SET t.current_record_ind = 0, t.end_date = (to_date('${esp_date}',\"yyyyMMdd\"))\r\n",
							"WHEN NOT MATCHED THEN\r\n",
							"  INSERT (sku_num, effective_date, end_date, product_nm, category_nm, sub_category_nm, \r\n",
							"          item_price_amt, standard_cost_amt, color_nm, load_ts, raw_batch_dt, current_record_ind) \r\n",
							"  VALUES (s.sku_num, to_date('${esp_date}',\"yyyyMMdd\"), '9999-12-31', s.product_nm, s.category_nm, s.sub_category_nm, \r\n",
							"          s.item_price_amt, s.standard_cost_amt, s.color_nm, s.load_ts, s.raw_batch_dt, 1)"
						],
						"outputs": [],
						"execution_count": 73
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%script echo skipping\r\n",
							"\r\n",
							"(spark.read\r\n",
							" .format(\"delta\").load(f\"{base_path}/edw/product_dim/\") #delta table folder to read from\r\n",
							" .repartition(1) #number of files to write\r\n",
							" .write.option(\"dataChange\", \"false\") #do not change the data\r\n",
							" .format(\"delta\").mode(\"overwrite\").save(f\"{base_path}/edw/product_dim/\")) #location to write new file(s)"
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"use adv_edw;\r\n",
							"\r\n",
							"--Vacuum files where table version is older than 7 days \r\n",
							"VACUUM product_dim RETAIN 168 HOURS;\r\n",
							"\r\n",
							"-- Retrieve the version/change history of the Delta table\r\n",
							"DESCRIBE HISTORY product_dim;"
						],
						"outputs": [],
						"execution_count": 79
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_ongoing_sales_fct')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "ongoing script for Sales_fct and Sales_Item_fct tables",
				"folder": {
					"name": "adv/pySpark/sales_fct"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d4fbd8f3-3c2e-4acd-b003-53ae174e0ea4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 15
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Init input parameters"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"esp_date = \"20170721\"\r\n",
							"path_base = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\""
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"USE adv_edw;\r\n",
							"SET spark.sql.sources.partitionOverwriteMode=dynamic;\r\n",
							"\r\n",
							"%%pyspark\r\n",
							"\r\n",
							"spark.conf.set(\"esp_date\", esp_date)"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Read Source tables"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Read Products RAW table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#spark.read.parquet(f\"{path_base}/raw/products/batch_dt={esp_date}*/*.parquet\").createOrReplaceTempView('ref_raw_products')\r\n",
							"df = spark.read.parquet(f\"{path_base}/raw/products/\").createOrReplaceTempView('ref_raw_products')"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Read Sales RAW table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"ms_comments": [
								{
									"threadId": "480b5ada-291f-43aa-919c-defe3b4f1649",
									"text": "need fix this",
									"status": "active",
									"user": {
										"name": "Ihor Sahan",
										"idType": "aad"
									},
									"createdDateUTC": 1699993686445,
									"modifiedDateUTC": 1699993686445,
									"replies": [
										{
											"replyId": "a440669c-bf17-45eb-a44b-5b9d3b5d23e2",
											"text": "Iryna please take a look",
											"user": {
												"name": "Ihor Sahan",
												"idType": "aad"
											},
											"createdDateUTC": 1699993802791,
											"modifiedDateUTC": 1699993802791
										},
										{
											"replyId": "fbbfcf29-832a-499e-b6a1-d077b950a98c",
											"text": "trtrty",
											"user": {
												"name": "Ihor Sahan",
												"idType": "aad"
											},
											"createdDateUTC": 1699993825844,
											"modifiedDateUTC": 1699993825844
										},
										{
											"replyId": "77c8a860-5356-46ab-8372-031c6df348fe",
											"text": "dfghdfgh",
											"user": {
												"name": "Ihor Sahan",
												"idType": "aad"
											},
											"createdDateUTC": 1699993828425,
											"modifiedDateUTC": 1699993828425
										},
										{
											"replyId": "c146aec8-f3c5-49da-8afb-3e08c1c3e1c4",
											"text": "fgh",
											"user": {
												"name": "Ihor Sahan",
												"idType": "aad"
											},
											"createdDateUTC": 1699993832799,
											"modifiedDateUTC": 1699993832799
										}
									]
								}
							]
						},
						"source": [
							"#try:\r\n",
							"#    spark.read.parquet(f\"{path_base}/raw/sales/batch_dt={esp_date}*/*.parquet\").createOrReplaceTempView('ref_raw_sales')\r\n",
							"#except:\r\n",
							"#    mssparkutils.notebook.exit(f\"cannot load batch_dt={esp_date} file\")  \r\n",
							"\r\n",
							"df = spark.read.parquet(f\"{path_base}/raw/sales/\").createOrReplaceTempView('ref_raw_sales')"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Perform Transformations"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"create or replace temporary view ref_stg_sales  AS\r\n",
							"\r\n",
							"select \r\n",
							"       s.pos_transaction_id\r\n",
							"     , p.sku_num\r\n",
							"     , s.item_price as item_price_amt\r\n",
							"     , s.item_qty \r\n",
							"     , s.batch_dt as raw_batch_dt\r\n",
							"     , CURRENT_TIMESTAMP as load_ts \r\n",
							"     , to_date(s.transaction_dt,\"yyyyMMdd\") as transaction_date\r\n",
							"  from ref_raw_sales s\r\n",
							"  left outer join ref_raw_products p on s.product_id = p.product_id and s.batch_dt = p.batch_dt and p.batch_dt = ${esp_date}\r\n",
							"  where s.batch_dt = ${esp_date}\r\n",
							""
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Write to Target table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"insert overwrite table adv_edw.sales_fct partition(transaction_date)\r\n",
							"select pos_transaction_id\r\n",
							"     , sku_num\r\n",
							"     , item_price_amt\r\n",
							"     , item_qty \r\n",
							"     , raw_batch_dt\r\n",
							"     , load_ts \r\n",
							"     , transaction_date\r\n",
							"  from ref_stg_sales\r\n",
							"  ;\r\n",
							""
						],
						"outputs": [],
						"execution_count": 32
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_recreate_product_dim')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/dll"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "96434fed-cd97-4a08-b16f-9c52d5e464e4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"USE adv_edw;\r\n",
							"\r\n",
							"DROP table if exists product_dim;\r\n",
							"\r\n",
							"CREATE TABLE IF NOT EXISTS product_dim (\r\n",
							"\tsku_num VARCHAR(100) not null,\r\n",
							"    effective_date date,\r\n",
							"    end_date date,\r\n",
							"\tproduct_nm VARCHAR(200),\r\n",
							"\tcategory_nm VARCHAR(100),\r\n",
							"\tsub_category_nm VARCHAR(100),\r\n",
							"\titem_price_amt decimal(8,2),\r\n",
							"\tstandard_cost_amt decimal(8,2),\r\n",
							"\tcolor_nm VARCHAR(100),\r\n",
							"\tload_ts timestamp,\r\n",
							"\traw_batch_dt int,\r\n",
							"  current_record_ind int\r\n",
							"\r\n",
							")\r\n",
							"USING DELTA\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/np_create_database')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "adv/dll"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "coursepool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f2b182b4-adbd-480c-baf9-d455626181e5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e8466fdf-9bf5-4a95-b888-76e57bd31ac5/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-isws/bigDataPools/coursepool",
						"name": "coursepool",
						"type": "Spark",
						"endpoint": "https://synapse-course-isws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"base_path = \"abfss://adventure-works@issynapsecoursedl.dfs.core.windows.net\"\r\n",
							"\r\n",
							"#spark.sql(\"DROP DATABASE IF EXISTS adv_edw CASCADE\")\r\n",
							"spark.sql(f\"CREATE DATABASE IF NOT EXISTS adv_edw LOCATION '{base_path}/edw'\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/coursepool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edwprd')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		}
	]
}